<?xml version="1.0" encoding="UTF-8"?>
<!--
stephen.yearl@yale.edu
2003-04-25/
version 0.0.1
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:variable name="lcChars">abcdefghijklmnopqrstuvwxyz</xsl:variable>
  <xsl:variable name="ucChars">ABCDEFGHIJKLMNOPQRSTUVWXYZ</xsl:variable>
<xsl:variable name="lcCharsHyphen">abcdefghijklmnopqrstuvwxyz-</xsl:variable>
<xsl:variable name="lcCharsSlash">abcdefghijklmnopqrstuvwxyz/</xsl:variable>  
  <xsl:output method="xml" encoding="UTF-8" indent="yes"/>
  <xsl:variable name="repCode" select="translate(//eadid/@mainagencycode,$ucChars,$lcChars)"/>
  <!-- ********************* <DSC> *********************** -->
  <xsl:template name="dsc" match="//dsc">
    <div class="dsc" name="{$dsc_id}" id="{$dsc_id}">
      <h3 class="structhead">
                    <xsl:value-of select="$dsc_head"/>
      </h3>
      <xsl:apply-templates select="*[not(self::head)]"/>
    </div>
  </xsl:template>
  <!-- ********************* </DSC> *********************** -->
  <!-- ********************* <SERIES> *************************** -->
  <xsl:template match="c01">

    <div class="c01">

      <xsl:choose>
        <!--inline dates-->
        <xsl:when test="$repCode='idu' or $repCode='ohy' or $repCode='orcsar' or $repCode='orcs' or $repCode='opvt' or $repCode='mtg' or $repCode='waps'">
          <xsl:call-template name="dsc_table_inline_date"/>
        </xsl:when>
        <!--default to columnar dates-->
        <xsl:otherwise>
          <xsl:call-template name="dsc_table_columnar_date"/>
        </xsl:otherwise>
      </xsl:choose>

		<!-- 2005-07-15 carlsonm mod only display link if there are c02s or is last c01 -->
		
		<xsl:if test="//c02 or position()=last()">
		<hr width="100%" style="height: 1px; color: #000000;" />
		</xsl:if>

    </div>

  </xsl:template>
  <!-- ********************* </SERIES> *************************** -->
  <!-- ********************* <COLUMNAR_DATES> *************************** -->
  <!--columnar dates are the default-->
  <xsl:template name="dsc_table_columnar_date">
    <xsl:variable name="columns">8</xsl:variable>
    <table width="100%" border="0" summary="A listing of materials in {./did/unittitle}.">
      <tbody>
		<!-- 2004-07-15 carlsonm mod insert a single heading for c01 only lists -->
		<xsl:if test="not(//c02) and position()=1">

		<tr>
          <td valign="top">&#160;</td>
<!-- carlsonm mode 2004-09-26 tracking #4.80 suppress container column heading if no container data -->
<xsl:choose>
<xsl:when test="string(//container)">
          <td valign="top" colspan="2" nowrap="nowrap">
            <h5 class="underline">Container(s)</h5>
          </td>
</xsl:when>
<xsl:otherwise>
<!-- 04-10-05 carlson mod(2), suppress whole container column if no data -->

<!-- <td valign="top" colspan="2"/> -->

</xsl:otherwise>
</xsl:choose>

          <td valign="top">
            <xsl:if test="descendant::unittitle">
              <h5 class="underline">Description</h5>
            </xsl:if>
          </td>
          <td valign="top">&#160;</td>
			 <xsl:choose>
			 <xsl:when test="string(descendant::c02)">
          <td valign="top">
          <h5 class="underline">Dates</h5>
				
          </td>
			 </xsl:when>
			 <xsl:otherwise>
			 <td> </td>
			 </xsl:otherwise>
			 </xsl:choose>
        </tr>		  

		  </xsl:if>
		  

		  <!-- temp comment out
<xsl:if test="not(//c02)">
<xsl:call-template name="container_labels_noc02"/> 
</xsl:if>		  
-->
		  <!-- end of carlsonm mod -->		  		
<!-- original MC mod
			 <xsl:if test="//c02">
-->
			 <xsl:if test="descendant::c02">
        <tr>
          <!-- original SY code
			 <td valign="top">&#160;</td>
			 -->
			 <!-- carlsonm mod only put this in if it's not a c01 only list -->

			 <td valign="top">&#160;</td>

          <td valign="top" colspan="{$columns - 1}">
            <xsl:apply-templates select="did"/>
          </td>
        </tr>
			 </xsl:if>			 
        <!--column headings-->
		  
		  <!-- 2004-07-15 carlsonm mod only repeat column headings when there are c02s -->
		  <xsl:if test="//c02">
        <tr class="line">
          <td valign="top">&#160;</td>
<!-- carlsonm mode 2004-09-26 tracking #4.80 suppress container column heading if no container data -->
<xsl:choose>
<xsl:when test="string(//container)">
          <td valign="top" colspan="2" nowrap="nowrap">
            <h5 class="underline">Container(s)</h5>
          </td>
</xsl:when>
<xsl:otherwise>
<!-- suppress whole column if no data 
<td valign="top" colspan="2"/>
-->
</xsl:otherwise>
</xsl:choose>
          <td width="60%" valign="top">
            <xsl:if test="descendant::unittitle">
              <h5 class="underline">Description</h5>
            </xsl:if>
          </td>
          <td width="1%" valign="top"></td>
			 <!--
          <td width="22%" valign="top">
          <h5 class="underline">Dates</h5>
				
          </td>
			 -->
			 
			 
<xsl:choose>
			 <xsl:when test="string(descendant::c02)">
          <td width="22%" valign="top">
          <h5 class="underline">Dates</h5>
				
          </td>
			 </xsl:when>
			 <xsl:otherwise>
          <td width="22%" valign="top"> </td>
			 </xsl:otherwise>
			 </xsl:choose>			 
			 
			 
			 
			 
			 
        </tr>		  
		  </xsl:if>
        <!--END column headings-->

        <xsl:choose>
<!-- original SY code
          <xsl:when test="./c02">
-->
          <xsl:when test="descendant::c02">
            <xsl:apply-templates select="c02"/>

          </xsl:when>
          <xsl:otherwise>
            <xsl:call-template name="c01_lowest"/>
          </xsl:otherwise>
        </xsl:choose>
		  
<!--
        <xsl:choose>
          <xsl:when test="//c02">
-->
<!-- This is for when a finding aid has c02 + -->
        <!-- <xsl:apply-templates select="c02"/>  -->
<!--
          </xsl:when>
          <xsl:otherwise>
            <xsl:call-template name="c01_lowest"/>
          </xsl:otherwise>
        </xsl:choose>
-->
	 
      </tbody>
    </table>

  </xsl:template>
  <!-- ********************* </COLUMNAR_DATES> *************************** -->
  <!-- ********************* <INLINE_DATES> *************************** -->
  <!--columnar dates are the default-->
  <xsl:template name="dsc_table_inline_date">
    <xsl:variable name="columns">6</xsl:variable>
    <table border="0" summary="A listing of materials in {./did/unittitle}.">
      <tbody>
		<!-- carlsonm add don't display a single c01 heading if there are no c02+ -->
		<xsl:if test="descendant::c02">
        <tr>
          <td valign="top">&#160;</td>
        <td valign="top" colspan="{$columns - 1}">
            <xsl:apply-templates select="did"/>
          </td>
        </tr>

		  </xsl:if>
		  
        <xsl:if test="$dscOrder='bfu'">
          <!--column headings-->
			 <!-- SY original code, removing to reduce space. carlsonm 
          <tr class="line">
            <td valign="top">&#160;</td>
          </tr>
			 -->
          <tr class="line">
            <td valign="top">&#160;</td>
				<!-- SY Original code
            <td valign="top" colspan="3">
				--><!-- carlsonm mode 2004-09-26 tracking #4.80 suppress container column heading if no container data -->
<xsl:choose>
<xsl:when test="string(//container)">
          <td valign="top" colspan="2" nowrap="nowrap">
            <h5 class="underline">Container(s)</h5>
          </td>
</xsl:when>
<xsl:otherwise>
<!--
<td valign="top" colspan="2"/>
-->
</xsl:otherwise>
</xsl:choose>

            <td valign="top">
              <xsl:if test="descendant::unittitle">
                <h5 class="underline">Description</h5>
              </xsl:if>
            </td>
          </tr>
        </xsl:if>
<!-- this modified last -->
        <xsl:choose>
          <xsl:when test="descendant::c02">
            <xsl:apply-templates select="c02"/>
          </xsl:when>
	
          <xsl:otherwise>

            <xsl:call-template name="c01_lowest"/>
          </xsl:otherwise>

        </xsl:choose>

      </tbody>
    </table>
<!-- <xsl:apply-templates select="c02|c03|c04|c05|c06|c07|c08|c09|c10|c11|c12"/>	 -->
  </xsl:template>
  <!-- ********************* <INLINE_DATES> *************************** -->
  <!-- ********************* START C0xs *************************** -->
  <xsl:template match="c02|c03|c04|c05|c06|c07|c08|c09|c10|c11|c12">
    <xsl:if test="$dscOrder='bfu'">
      <tr>
        <td width="1%" valign="top">&#160;</td>
        <!-- <td valign="top"> -->
<!-- 04-10-05 carlsonm mod(2) suppress whole container column if no data at all -->
<xsl:if test="string(//container)">
          <xsl:choose>
<!-- old            <xsl:when test="did/container"> -->
            <xsl:when test="string(did/container)">
              <td width="15%" valign="top">
                <xsl:call-template name="container_labels"/>
              </td>
            </xsl:when>
            <xsl:otherwise>
              <td width="15%" valign="top">
                <xsl:text>&#160;</xsl:text>
              </td>
            </xsl:otherwise>
          </xsl:choose>
</xsl:if>
<!--        </td> -->
        <td width="1%" valign="top">
					<!--<xsl:if test="@level">
<xsl:value-of select="@level"/>&#160;<xsl:value-of select="position()"/>:&#160;
				</xsl:if>-->
        </td>
<!-- original code
        <td width="60%" valign="bottom">
-->
        <td width="60%" valign="top">
          <xsl:if test="@id">
            <a>
              <xsl:attribute name="name"><xsl:value-of select="@id"/></xsl:attribute>
            </a>
          </xsl:if>
              <a>
              <xsl:attribute name="name"><xsl:value-of select="generate-id()"/></xsl:attribute>
            </a>
            <a>
              <xsl:attribute name="name"><xsl:value-of select="name()"/>_<xsl:value-of select="position()"/></xsl:attribute>
            </a>

          <div class="{name()}">
           <!-- 04-10-08 <p> -->
              <xsl:apply-templates select="did"/>
            <!-- </p> -->
          </div>

        </td>
        <xsl:choose>
          <xsl:when test="$repCode!='idu' and $repCode!='ohy' and $repCode!='orcsar' and $repCode!='orcs' and $repCode!='opvt' and $repCode!='mtg' and $repCode!='waps'">
            <td width="1%" valign="top">&#160;</td>

			<td width="22%" valign="top">
<!-- carlsonm note 04-10-02 I'm not sure what the original intent was behind not
displaying dates for "subseries"			
              <xsl:if test="./did/unitdate and ./did/unittitle and @level!='subseries'">
-->
           <xsl:if test="./did/unitdate">
<!-- original SY code
                <p class="box">
-->
                  <xsl:apply-templates select="did/unitdate"/>
<!--
                </p>
-->
              </xsl:if>
            </td>
          </xsl:when>
          <xsl:otherwise/>
        </xsl:choose>
      </tr>
    </xsl:if>
	 
    <xsl:apply-templates select="c02|c03|c04|c05|c06|c07|c08|c09|c10|c11|c12"/> 
  </xsl:template>
  <!-- ********************* END C0xs *************************** -->
  
  <!-- ********************* START CONTAINER LABELS *************************** -->
  <xsl:template name="container_labels">
	 <table width="100%" border="0" cellspacing="1" cellpadding="1">
      <tr>
<!-- Container column 1 formatting -->
<!-- Container heading -->
<!--
<td width="4%" nowrap="true" valign="top" class="componenttext" align="left">
-->
<td width="7%" nowrap="true" valign="top" class="componenttext" align="left">

<xsl:choose>
<xsl:when test="not(../c01)">
   <xsl:choose>
   <xsl:when test="string(preceding::did[1]/container[1])">

      <xsl:choose>
      <xsl:when test="did/container[1]/@type=preceding::did[1]/container[1]/@type or did/container[1]/@label=preceding::did[1]/container[1]/@label">
		
      </xsl:when>
      <xsl:otherwise>
      <xsl:call-template name="container_column1_heading"/>
      </xsl:otherwise>
      </xsl:choose>
   </xsl:when>
   <xsl:when test="string(preceding::did[2]/container[1]) and not(../../c01)">

      <xsl:choose>
      <xsl:when test="did/container[1]/@type=preceding::did[2]/container[1]/@type or did/container[1]/@label=preceding::did[2]/container[1]/@label">		

      </xsl:when>
      <xsl:otherwise>
      <xsl:call-template name="container_column1_heading"/>
      </xsl:otherwise>
      </xsl:choose>

   </xsl:when>

   <xsl:when test="string(preceding::did[3]/container[1]) and descendant-or-self::c04">

      <xsl:choose>
      <xsl:when test="did/container[1]/@type=preceding::did[3]/container[1]/@type or did/container[1]/@label=preceding::did[3]/container[1]/@label">		

      </xsl:when>
      <xsl:otherwise>
      <xsl:call-template name="container_column1_heading"/>
      </xsl:otherwise>
      </xsl:choose>
   </xsl:when>
   <xsl:otherwise>
   <xsl:call-template name="container_column1_heading"/>
   </xsl:otherwise>
   </xsl:choose>
</xsl:when>
<xsl:otherwise>
<xsl:call-template name="container_column1_heading"/>
</xsl:otherwise>
</xsl:choose>
<!-- End container heading 1 -->

<!-- Container data 1-->
<xsl:choose>
<xsl:when test="not(../c01)">

   <xsl:choose>
   <xsl:when test="string(preceding::did[1]/container[1])">
      <xsl:choose>
      <xsl:when test="did/container[1]=preceding::did[1]/container[1]">		

      </xsl:when>
      <xsl:otherwise>
      <xsl:apply-templates select="did/container[1]"/>
      </xsl:otherwise>
      </xsl:choose>
   </xsl:when>

   <xsl:when test="string(preceding::did[2]/container[1]) and not(../../c01)">

      <xsl:choose>
      <xsl:when test="did/container[1]=preceding::did[2]/container[1]">		

      </xsl:when>
      <xsl:otherwise>
      <xsl:apply-templates select="did/container[1]"/>
      </xsl:otherwise>
      </xsl:choose>
   </xsl:when>
<xsl:when test="string(preceding::did[3]/container[1]) and descendant-or-self::c04">

      <xsl:choose>
      <xsl:when test="did/container[1]=preceding::did[3]/container[1]">		

      </xsl:when>
      <xsl:otherwise>
      <xsl:apply-templates select="did/container[1]"/>
      </xsl:otherwise>
      </xsl:choose>
   </xsl:when>

   <xsl:otherwise>
   <xsl:apply-templates select="did/container[1]"/>
   </xsl:otherwise>
   </xsl:choose>
</xsl:when>

<xsl:otherwise>
<xsl:apply-templates select="did/container[1]"/>
</xsl:otherwise>
</xsl:choose>

</td>
<!-- End container 1 data -->

<!-- Container heading 2 begin -->
<td width="7%" nowrap="true" valign="top" class="componenttext" align="left">

<xsl:choose>
<xsl:when test="not(../c01) and string(did/container[2])">
   <xsl:choose>
   <xsl:when test="string(preceding::did[1]/container[2])">

      <xsl:choose>
      <xsl:when test="did/container[2]/@type=preceding::did[1]/container[2]/@type or did/container[2]/@label=preceding::did[1]/container[2]/@label">		
      </xsl:when>
      <xsl:otherwise>
      <xsl:call-template name="container_column2_heading"/>
      </xsl:otherwise>
      </xsl:choose>
   </xsl:when>
   <xsl:when test="string(preceding::did[2]/container[2]) and not(../../c01)">

      <xsl:choose>
      <xsl:when test="did/container[2]/@type=preceding::did[2]/container[2]/@type or did/container[2]/@label=preceding::did[2]/container[2]/@label">		
      </xsl:when>
      <xsl:otherwise>
      <xsl:call-template name="container_column2_heading"/>
      </xsl:otherwise>
      </xsl:choose>
   </xsl:when>
   <xsl:otherwise>
   <xsl:call-template name="container_column2_heading"/>
   </xsl:otherwise>
   </xsl:choose>
</xsl:when>
<xsl:otherwise>
<xsl:call-template name="container_column2_heading"/>
</xsl:otherwise>
</xsl:choose>
<!-- container heading 2 end -->

<!-- Container 2 data  begin -->
<xsl:choose>
<xsl:when test="not(../c01) and string(did/container[2])">

   <xsl:choose>
   <xsl:when test="string(preceding::did[1]/container[2])">
      <xsl:choose>
      <xsl:when test="did/container[2]=preceding::did[1]/container[2]">		
      </xsl:when>
      <xsl:otherwise>
      <xsl:apply-templates select="did/container[2]"/>
      </xsl:otherwise>
      </xsl:choose>
   </xsl:when>

   <xsl:when test="string(preceding::did[2]/container[2]) and not(../../c01)">

      <xsl:choose>
      <xsl:when test="did/container[2]=preceding::did[2]/container[2]">		
      </xsl:when>
      <xsl:otherwise>
      <xsl:apply-templates select="did/container[2]"/>
      </xsl:otherwise>
      </xsl:choose>
   </xsl:when>

   <xsl:otherwise>
   <xsl:apply-templates select="did/container[2]"/>
   </xsl:otherwise>
   </xsl:choose>
</xsl:when>

<xsl:otherwise>
<xsl:apply-templates select="did/container[2]"/>
</xsl:otherwise>
</xsl:choose>

</td>

<!-- new column 3 formatting -->
<td width="7%" nowrap="true" valign="top" class="componenttext" align="left">

<xsl:choose>
<xsl:when test="not(../c01) and string(did/container[3])">
   <xsl:choose>
   <xsl:when test="string(preceding::did[1]/container[3])">

      <xsl:choose>
      <xsl:when test="did/container[3]/@type=preceding::did[1]/container[3]/@type or did/container[3]/@label=preceding::did[1]/container[3]/@label">		
      </xsl:when>
      <xsl:otherwise>
      <xsl:call-template name="container_column3_heading"/>
      </xsl:otherwise>
      </xsl:choose>
   </xsl:when>
   <xsl:when test="string(preceding::did[2]/container[3]) and not(../../c01)">

      <xsl:choose>
      <xsl:when test="did/container[3]/@type=preceding::did[2]/container[3]/@type or did/container[3]/@label=preceding::did[2]/container[3]/@label">		
      </xsl:when>
      <xsl:otherwise>
      <xsl:call-template name="container_column3_heading"/>
      </xsl:otherwise>
      </xsl:choose>
   </xsl:when>
   <xsl:otherwise>
   <xsl:call-template name="container_column3_heading"/>
   </xsl:otherwise>
   </xsl:choose>
</xsl:when>
<xsl:otherwise>
<xsl:call-template name="container_column3_heading"/>
</xsl:otherwise>
</xsl:choose>


<!-- Container 3 data -->
<xsl:choose>
<xsl:when test="not(../c01) and string(did/container[3])">

   <xsl:choose>
   <xsl:when test="string(preceding::did[1]/container[3])">
      <xsl:choose>
      <xsl:when test="did/container[3]=preceding::did[1]/container[3]">		
      </xsl:when>
      <xsl:otherwise>
      <xsl:apply-templates select="did/container[3]"/>
      </xsl:otherwise>
      </xsl:choose>
   </xsl:when>

   <xsl:when test="string(preceding::did[2]/container[3]) and not(../../c01)">

      <xsl:choose>
      <xsl:when test="did/container[3]=preceding::did[2]/container[3]">		
      </xsl:when>
      <xsl:otherwise>
      <xsl:apply-templates select="did/container[3]"/>
      </xsl:otherwise>
      </xsl:choose>
   </xsl:when>

   <xsl:otherwise>
   <xsl:apply-templates select="did/container[3]"/>
   </xsl:otherwise>
   </xsl:choose>
</xsl:when>

<xsl:otherwise>
<xsl:apply-templates select="did/container[3]"/>
</xsl:otherwise>
</xsl:choose>

</td>

<!-- end of new column 3 formatting -->




      </tr>
</table>
  </xsl:template>
<!-- new container heading templates carlsonm 04-10-05 -->
<xsl:template name="container_column1_heading">
             <span class="containerLabel">
            <xsl:choose>
              <xsl:when test="did/container[1]/@type">
                <xsl:value-of select="translate(did/container[1]/@type, $lcCharsHyphen, $lcCharsSlash)"/>
              </xsl:when>
              <xsl:when test="did/container[1]/@label">
                <xsl:value-of select="did/container[1]/@label"/>
              </xsl:when>
            </xsl:choose>
          </span>

			 <br/>
</xsl:template>
<xsl:template name="container_column2_heading">
             <span class="containerLabel">
            <xsl:choose>
              <xsl:when test="did/container[2]/@type">
                <xsl:value-of select="translate(did/container[2]/@type, $lcCharsHyphen, $lcCharsSlash)"/>
              </xsl:when>
              <xsl:when test="did/container[2]/@label">
                <xsl:value-of select="did/container[2]/@label"/>
              </xsl:when>
            </xsl:choose>
          </span>

			 <br/>
</xsl:template>

<xsl:template name="container_column3_heading">
             <span class="containerLabel">
            <xsl:choose>
              <xsl:when test="did/container[3]/@type">
                <xsl:value-of select="translate(did/container[3]/@type, $lcCharsHyphen, $lcCharsSlash)"/>
              </xsl:when>
              <xsl:when test="did/container[3]/@label">
                <xsl:value-of select="did/container[3]/@label"/>
              </xsl:when>
            </xsl:choose>
          </span>

			 <br/>
</xsl:template>


  <!-- 2004-07-15 carlsonm addition to process c01 lists differently -->
<xsl:template name="container_labels_noc02">

      <tr>
        <td nowrap="true" valign="top" class="componenttext" align="left">
          <span class="containerLabel">
            <xsl:choose>
              <xsl:when test="did/container[1]/@type">
                <xsl:value-of select="did/container[1]/@type"/>
              </xsl:when>
              <xsl:when test="did/container[1]/@label">
                <xsl:value-of select="did/container[1]/@label"/>
              </xsl:when>
            </xsl:choose>
          </span>
			 <br/>
          <xsl:value-of select="did/container[1]"/>
          <xsl:text> </xsl:text>
        </td>
        <td nowrap="true" valign="top" class="componenttext" align="left">
          <span class="containerLabel">
            <xsl:choose>
              <xsl:when test="did/container[2]/@type">
                <xsl:value-of select="did/container[2]/@type"/>
              </xsl:when>
              <xsl:when test="did/container[2]/@label">
                <xsl:value-of select="did/container[2]/@label"/>
              </xsl:when>
            </xsl:choose>
          </span>
          <br/>
          <xsl:value-of select="did/container[2]"/>
          <xsl:text> </xsl:text>
        </td>
        <td nowrap="true" valign="top" class="componenttext" align="left">
          <span class="containerLabel">
            <xsl:choose>
              <xsl:when test="did/container[3]/@type">
                <xsl:value-of select="did/container[3]/@type"/>
              </xsl:when>
              <xsl:when test="did/container[3]/@label">
                <xsl:value-of select="did/container[3]/@label"/>
              </xsl:when>
            </xsl:choose>
          </span>
          <br/>
          <xsl:value-of select="did/container[3]"/>
          <xsl:text> </xsl:text>
        </td>
      </tr>

  </xsl:template>
<!-- end of carlsonm addition -->
  <!-- ********************* END CONTAINER LABELS *************************** -->
  <xsl:template match="c01//did">
<!-- c01 only -->

    <xsl:choose>
	 <!-- original SY code
      <xsl:when test="parent::c01 or parent::*[@level='subseries']">
		-->
      <xsl:when test="parent::c01 and //c02">		
        <xsl:if test="count(parent::c01/preceding-sibling::c01)!='0'">
		  <br/>
        </xsl:if>

        <h3 class="structhead">

          <!--<a name="{parent::c01/@id}{@id}"/>-->
          <a name="c01_{count(parent::c01/preceding-sibling::c01)+1}"/>
                        <a>
              <xsl:attribute name="name"><xsl:value-of select="generate-id()"/></xsl:attribute>
            </a>
          <!-- what if no unitititle-->
          <xsl:choose>
            <xsl:when test="./unittitle">
              <xsl:if test="./unitid">
<xsl:if test="unitid/@label">
<span class="containerLabel">
<xsl:value-of select="unitid/@label"/><xsl:text>&#160;</xsl:text>
</span>
</xsl:if>

                <xsl:value-of select="./unitid"/>:<xsl:text> &#160;</xsl:text>
              </xsl:if>
              <xsl:apply-templates select="./unittitle"/>

<xsl:if test="string(unitdate) and string(unittitle)">,&#160;</xsl:if>
<xsl:if test="string(unitdate)">
<xsl:for-each select="unitdate">
<xsl:choose>
<xsl:when test="not(@type='bulk')">
<xsl:apply-templates/>
</xsl:when>
<xsl:when test="@type='bulk'">
&#160;(bulk <xsl:apply-templates/>)
</xsl:when>
</xsl:choose>
</xsl:for-each>
              </xsl:if>
            </xsl:when>
				<!-- SY Original Code
            <xsl:when test="./unitid[@encodinganalog='245$a']/text() and not(./unittitle)">
				-->
             <xsl:when test="./unitid/text() and not(./unittitle)">
              <xsl:if test="unitid/@label">
<span class="containerLabel">
<xsl:value-of select="unitid/@label"/><xsl:text>&#160;</xsl:text>
</span>
</xsl:if>
<xsl:value-of select="./unitid"/>
            </xsl:when>
				<xsl:when test="./unitdate/text() and not(./unittitle)">
                                <xsl:value-of select="./unitdate"/>
            </xsl:when>
            <xsl:otherwise>Subordinate Component # <xsl:value-of select="count(parent::c01/preceding-sibling::c01)+1"/>
            </xsl:otherwise>
          </xsl:choose>
          <!-- END what if no unitititle-->

        </h3>

      </xsl:when>
      <xsl:when test="$repCode='idu' or $repCode='ohy' or $repCode='orcsar' or $repCode='orcs' or $repCode='opvt' or $repCode='mtg' or $repCode='waps'">
<!-- 2004-09-26 carlsonm mod to add display for <unitid> -->
<!-- Tracking # 4.10 Collins Land Company display -->
<xsl:if test="unitid">
<xsl:if test="unitid/@label">
<span class="containerLabel">
<xsl:value-of select="unitid/@label"/><xsl:text>&#160;</xsl:text>
</span>
</xsl:if>
<xsl:apply-templates select="unitid"/>:<xsl:text>&#160;&#160;</xsl:text>
</xsl:if>
                      <xsl:apply-templates select="unittitle"/>
<!-- carlsonm 2004-09-26 not sure what the original intent was for this.  The <unitdate> element is not displaying in UMt Great Falls Breweries, Tracking #4.80 -->
<!--
        <xsl:if test="unittitle and unitdate and not(parent::c01)">,&#160;</xsl:if>

        <xsl:if test="not(parent::c01)">

 carlsonm mod 2004-09-26 adding comma before date OBSOLETE, REVISED
<xsl:if test="string(unitdate) and string(unittitle)">,&#160;</xsl:if>

          <xsl:apply-templates select="./unitdate"/>

        </xsl:if>
-->
<!-- 2004-10-02 new mod for date so that empty elements will be ignored -->

<xsl:if test="string(unitdate) and string(unittitle)">,&#160;</xsl:if>
<xsl:if test="string(unitdate)">
<xsl:for-each select="unitdate">
<xsl:choose>
<xsl:when test="not(@type='bulk')">
<xsl:apply-templates/>
</xsl:when>
<xsl:when test="@type='bulk'">
&#160;(bulk <xsl:apply-templates/>)
</xsl:when>
</xsl:choose>
</xsl:for-each>
</xsl:if>


      </xsl:when>
		<!-- carlsonm This is where the unittitle info is output when it is a c01 list only -->
      <xsl:otherwise>

        <xsl:value-of select="unittitle/@label"/>&#160;
				<!-- what if no unitititle-->
        <xsl:choose>
          <xsl:when test="./unittitle">
            <xsl:if test="./unitid">
<xsl:if test="unitid/@label">
<span class="containerLabel">
<xsl:value-of select="unitid/@label"/><xsl:text>&#160;</xsl:text>
</span>
</xsl:if>

              <xsl:value-of select="./unitid"/>:<xsl:text> &#160;</xsl:text>
            </xsl:if>
				<!-- mod here -->
                          <xsl:apply-templates select="./unittitle"/>
				<!-- carlsonm add -->
				<!--
<xsl:if test="./unitdate">,&#160;<xsl:value-of select="./unitdate"/>
</xsl:if>
-->
			<!-- end add -->
          </xsl:when>
          <xsl:when test="./unitid/text() and not(./unittitle)">
           <xsl:if test="unitid/@label">
<span class="containerLabel">
<xsl:value-of select="unitid/@label"/><xsl:text>&#160;</xsl:text>
</span>
</xsl:if>
 <xsl:value-of select="./unitid"/>
          </xsl:when>			 
          <xsl:when test="./unitdate/text() and not(./unittitle)">
                              <xsl:value-of select="./unitdate"/>
          </xsl:when>
			 <!-- carlsonm 2004-07-15 the following test governs whether a second unittitle should display when there is only a single c01 -->
			 <!-- commented out, it doesn't display -->
			 <!-- SY original code
          <xsl:when test="./unitid[@encodinganalog='245$a']/text() and not(./unittitle)">
            <xsl:value-of select="./unitid"/>
          </xsl:when>
			 -->
          <xsl:otherwise>Subordinate Component</xsl:otherwise>
        </xsl:choose>
        <!-- END what if no unitititle-->
      </xsl:otherwise>
    </xsl:choose>
    
     
    
<!--non-unittitle,unitdate,unitid descriptive information-->
    <xsl:if test="./acqinfo | ./accruals | ./custodhist | ./processinfo | ./separatedmaterial | ./physdesc | ./physloc | ./origination | ./note |following-sibling::odd | following-sibling::scopecontent | following-sibling::arrangement">
      <div class="c_odd">
        <xsl:for-each select="./acqinfo | ./accruals | ./custodhist | ./processinfo | ./separatedmaterial | ./physdesc | ./physloc | ./origination | ./note | following-sibling::odd | following-sibling::scopecontent | following-sibling::arrangement">
          <xsl:call-template name="archdesc_minor_children">
			 <!-- SY original code
            <xsl:with-param name="withLabel">true</xsl:with-param>
				-->
            <xsl:with-param name="withLabel">false</xsl:with-param>				
          </xsl:call-template>
          <br/>
        </xsl:for-each>
      </div>
    </xsl:if>
    <!-- call daogrp seperately-->
	 <!-- 2004-07-16 carlsonm. Removing this for now until it can be address properly
        <xsl:if test="./daogrp | following-sibling::daogrp | ./dao | following-sibling::dao">
      &lt;daogrp&gt;<xsl:apply-templates select="daogrp"/>&lt;/daogrp&gt;

    </xsl:if>
    -->
  </xsl:template>
  <!--===============================================
==================================-->
  <xsl:template name="c01_lowest_original">

    <tr>
      <td valign="top">&#160;</td>
      <td valign="top">
        <xsl:if test="descendant::container[@type='box']">
          <p class="box">
            <xsl:value-of select="did/container[@type='box']"/>
          </p>
        </xsl:if>
        <xsl:if test="descendant::container[@type='box-folder']">
          <p class="box">
            <xsl:value-of select="did/container[@type='box-folder']"/>
          </p>
        </xsl:if>
      </td>
      <td valign="top">
        <xsl:if test="descendant::container[@type='folder']">
          <p class="folder">
            <xsl:value-of select="did/container[@type='folder']"/>
          </p>
        </xsl:if>
      </td>
      <td valign="top">
        <xsl:if test="descendant::container[@type!='folder' or @type!='box' or @type!='box-folder']">
          <p class="reel">
            <xsl:value-of select="did/container/@type"/>
          </p>
        </xsl:if>
      </td>
      <td valign="top">&#160;</td>
		
      <td valign="top">
		
       <xsl:if test="@id">
          <a>
            <xsl:attribute name="name"><xsl:value-of select="@id"/></xsl:attribute>
          </a>
        </xsl:if>
	
		  <!-- original SY code
        <xsl:if test="self::c01">
          <p class="c02">
            <xsl:apply-templates select="did"/>
          </p>
        </xsl:if>
 -->
      </td>
	

      <xsl:choose>
        <xsl:when test="not($repCode='idu' or $repCode='ohy' or $repCode='orcsar' or $repCode='opvt' or $repCode='mtg' or $repCode='waps')">
          <td valign="top">&#160;</td>
          <td valign="top">
            <!--<xsl:if test="descendant::unitdate">-->
<!-- original SY code 
            <p class="box">
-->
                                <xsl:apply-templates select="did/unitdate"/>
<!--
            </p>
-->
            <!--</xsl:if>-->
          </td>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
	
    </tr>
	 
    <!--<xsl:call-template name="c01_lowest"/>-->
  </xsl:template>
    <xsl:template name="c01_lowest">
  <tr>
        <td width="1%" valign="top">&#160;</td>
        <!-- SY Original <td valign="top"> -->
          <xsl:choose>
           <!-- old <xsl:when test="did/container"> -->
<xsl:when test="string(did/container)">
<!-- carlsonm mod 04-10-05 change from 15% to 10% for alignment -->
              <td width="11%" valign="top">
                <xsl:call-template name="container_labels"/>
              </td>
            </xsl:when>
            <xsl:otherwise>
              <td width="11%" valign="top">
                <xsl:text>&#160;</xsl:text>
              </td>
            </xsl:otherwise>
          </xsl:choose>
        <!-- SY original </td> -->
        <td width="1%" valign="top">
					<!--<xsl:if test="@level">
<xsl:value-of select="@level"/>&#160;<xsl:value-of select="position()"/>:&#160;
				</xsl:if>-->
        </td>
<!-- original code
        <td width="60%" valign="bottom">
-->
        <td width="60%" valign="top">
          <xsl:if test="@id">
            <a>
              <xsl:attribute name="name"><xsl:value-of select="@id"/></xsl:attribute>
            </a>
          </xsl:if>
              <a>
              <xsl:attribute name="name"><xsl:value-of select="generate-id()"/></xsl:attribute>
            </a>
            <a>
              <xsl:attribute name="name"><xsl:value-of select="name()"/>_<xsl:value-of select="position()"/></xsl:attribute>
            </a>

          <div class="{name()}">
            <p>
              <xsl:apply-templates select="did"/>
            </p>
          </div>
        </td>
        <xsl:choose>
          <xsl:when test="$repCode!='idu' and $repCode!='ohy' and $repCode!='orcsar' and $repCode!='opvt' and $repCode!='mtg' and $repCode!='waps'">
            <td width="1%" valign="top">&#160;</td>
            <td width="22%" valign="top">
<!-- carlsonm: what was the subseries level restriction for?
              <xsl:if test="./did/unitdate and ./did/unittitle and @level!='subseries'">
-->
<!-- 04-10-07 carlsonm, this is creating a problem when c01 is lowest, dates printing twice
              <xsl:if test="./did/unitdate">
				  -->
				  
              <xsl:if test="./did/unitdate and string(descendant::c02)">				  
<!-- original SY code
                <p class="box">
-->
                                    <xsl:apply-templates select="did/unitdate"/>
<!--
                </p>
-->
              </xsl:if>
            </td>
          </xsl:when>
          <xsl:otherwise/>
        </xsl:choose>
      </tr>
  </xsl:template>
  
  
</xsl:stylesheet>
